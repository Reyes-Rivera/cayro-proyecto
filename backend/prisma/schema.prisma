generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model FAQ {
  id          Int      @id @default(autoincrement())
  question    String   @db.VarChar(5000)
  answer      String   @db.VarChar(5000)
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category    FAQCategory @relation(fields: [categoryId], references: [id])
}

model FAQCategory {
  id       Int    @id @default(autoincrement())
  name     String @unique @db.VarChar(100)
  faqs     FAQ[]
}

model SecurityQuestion {
  id       Int    @id @default(autoincrement())
  question String @unique @db.VarChar(255)
  users    User[] 
}

model User {
  id                Int       @id @default(autoincrement())
  name              String    @db.VarChar(100)
  surname           String    @db.VarChar(100)
  email             String    @unique @db.VarChar(100)
  phone             String    @db.VarChar(15)
  birthdate          DateTime
  password          String    @db.VarChar(255)
  passwordSetAt     DateTime  @default(now())
  passwordExpiresAt DateTime?
  passwordsHistory  Json?
  loginAttempts     Int       @default(0)
  lockUntil         DateTime?
  gender            GenderUser
  active            Boolean   @default(false)
  role              Role      @default(USER)
  profilePicture    String?   @db.VarChar(255)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  isDeleted         Boolean   @default(false)
  sales             Sale[]
  addresses         Address[] @relation("UserAddresses")
  cart              Cart?     @relation("UserCart")
  securityQuestionId Int?
  securityQuestion   SecurityQuestion? @relation(fields: [securityQuestionId], references: [id])
  securityAnswer     String? @db.VarChar(255) 
}
//done
model Configuration {
  id                    Int  @id @default(autoincrement())
  timeTokenLogin        Int
  timeTokenEmail        Int
  attemptsLogin         Int
  emailVerificationInfo Json
  emailLogin            Json
  emailResetPass        Json
}
//done
model UserActivity {
  id     Int      @id @default(autoincrement())
  email  String   @db.VarChar(255)
  action String   @db.VarChar(255)
  date   DateTime
}
//done
model Employee {
  id                Int       @id @default(autoincrement())
  name              String    @db.VarChar(255)
  surname           String    @db.VarChar(255)
  email             String    @unique @db.VarChar(255)
  phone             String    @db.VarChar(20)
  birthdate          DateTime
  password          String    @db.VarChar(255)
  passwordSetAt     DateTime  @default(now())
  passwordExpiresAt DateTime
  passwordsHistory  Json?
  loginAttempts     Int       @default(0)
  lockUntil         DateTime?
  gender            GenderUser
  role              Role
  addresses         Address[] @relation("EmployeeAddresses")
  sales             Sale[]    @relation("EmployeeSales")
  auditLogs         Audit[]
}

enum Role {
  USER
  ADMIN
  EMPLOYEE
}

enum GenderUser {
  MALE
  FEMALE
  OTHER
}

enum SaleStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Address {
  id         Int        @id @default(autoincrement())
  street     String     @db.VarChar(255)
  city       String     @db.VarChar(255)
  state      String     @db.VarChar(255)
  country    String     @db.VarChar(255)
  postalCode String
  colony     String     @db.VarChar(255)
  users      User[]     @relation("UserAddresses")
  employees  Employee[] @relation("EmployeeAddresses")
  sales      Sale[]     @relation("SaleAddresses")
}

model Audit {
  id        Int            @id @default(autoincrement())
  action    String
  adminId   Int
  date      DateTime       @default(now())
  companyId Int
  company   CompanyProfile @relation(fields: [companyId], references: [id])
  admin     Employee       @relation(fields: [adminId], references: [id])
}

model CompanyProfile {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  slogan      String
  logoUrl     String
  contactInfo Json
  auditLog    Audit[]
  mission     String   @db.VarChar(5000)
  vision      String   @db.VarChar(5000)
  socialLinks Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DocumentRegulatory {
  id                Int       @id @default(autoincrement())
  title             String    @db.VarChar(255) 
  content           String    @db.Text
  version           Int?     
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
  effectiveDate     DateTime
  isDeleted         Boolean?  @default(false) 
  isCurrentVersion  Boolean?  @default(false)
  previousVersionId Int?   
  status            Status?  
  type              DocumentTypeInter
}

enum Status {
  CURRENT
  NOT_CURRENT
  REMOVED
}

// Enum para el tipo de documento
enum DocumentTypeInter {
  POLICIES
  TERMS_AND_CONDITIONS
  LEGAL_DISCLAIMER
}

model Product {
  id               Int      @id @default(autoincrement())
  name             String
  description      String   @db.VarChar(5000)
  active           Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  brandId          Int
  genderId         Int
  sleeveId         Int
  categoryId       Int

  brand            Brand     @relation(fields: [brandId], references: [id])
  gender           Gender    @relation(fields: [genderId], references: [id])
  sleeve           Sleeve    @relation(fields: [sleeveId], references: [id])
  category         Category  @relation(fields: [categoryId], references: [id])

  variants         ProductVariant[]
}

model Color {
  id       Int    @id @default(autoincrement())
  name     String @unique
  hexValue String @unique
  variants ProductVariant[]
}

model Size {
  id       Int    @id @default(autoincrement())
  name     String @unique
  variants ProductVariant[]
}

model ProductVariant {
  id        Int     @id @default(autoincrement())
  productId Int
  colorId   Int
  sizeId    Int
  price     Float
  stock     Int      @default(0)
  barcode   String   @unique 
  imageUrl  String   @db.VarChar(255)
  
  product   Product @relation(fields: [productId], references: [id])
  color     Color   @relation(fields: [colorId], references: [id])
  size      Size    @relation(fields: [sizeId], references: [id])
  saleDetails SaleDetail[] 
  cartItems  CartItem[]
  @@unique([productId, colorId, sizeId]) 
}


model Gender {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Sleeve {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Sale {
  id               Int        @id @default(autoincrement())
  userId           Int
  addressId        Int
  totalAmount      Float
  status           SaleStatus @default(PENDING)
  employeeId       Int
  shippedAt        DateTime?
  deliveredAt      DateTime?
  references       String?
  betweenStreetOne String?
  betweenStreetTwo String?
  createdAt        DateTime   @default(now())

  user        User         @relation(fields: [userId], references: [id])
  address     Address      @relation("SaleAddresses", fields: [addressId], references: [id])
  employee    Employee     @relation("EmployeeSales", fields: [employeeId], references: [id])
  saleDetails SaleDetail[]
}

model SaleDetail {
  id                      Int             @id @default(autoincrement())
  saleId                  Int
  productVariantId        Int
  quantity                Int
  unitPrice               Float
  totalPrice              Float
  productVariant          ProductVariant  @relation(fields: [productVariantId], references: [id])
  sale                    Sale            @relation(fields: [saleId], references: [id])
}

model Cart {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User      @relation("UserCart", fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id               Int            @id @default(autoincrement())
  cartId           Int
  productVariantId Int
  quantity         Int            @default(1)

  cart            Cart           @relation(fields: [cartId], references: [id])
  productVariant  ProductVariant @relation(fields: [productVariantId], references: [id])

  @@unique([cartId, productVariantId])  // Evita duplicados en el carrito
}



